#!/usr/bin/env bash

PASSRC=${PASSRC:-"$HOME/.passrc"}
PASS_STORE=${PASS_STORE:-"$HOME/.pass/"}

OTP_STORE="$PASS_STORE/otp/"
RECUVA_STORE="$PASS_STORE/recovery/"

if [[ "$PASS_STORE" != "$HOME"* ]]; then
  echo "Danger! PASS_STORE is not located within the home directory!"
  echo "PASS_STORE Location: $PASS_STORE"
  echo "Exitting!"
  exit 1
fi

if ! command -v oathtool &>/dev/null; then
  echo "oathtool could not be found. Please install it."
  exit 1
fi

SCRIPT_DIR="$(dirname "$(realpath "$0")")"
source "$SCRIPT_DIR/pass"

function usage_otp() {
  cat <<EOF
pass-otp: A modern CLI OTP manager

Usage: $0 [options] <command> [arguments]

Options:

  -a [-s] <salt> [-i] <iteration>
  -c                          Copy password to clipboard after password creation
  -d <zenity>                 Choose a dialog to get passwords
  -e                          Extra command run post clipboard cleareance
  -f                          Force. Bypass confirmation dialogs. May be destructive.
  -h, --help                  Display this help message and exit
  -n                          Enable notifications
                              Use Entropy Amplification
  -z                          Don't keep private key cached

Commands:
  add, new, gen, generate [-a -f -c -p] <pass-name> <OTP-length>
                           Generate a new OTP
  close                    Remove cached private key
  cp, copy, clip [-a] <pass-name>
                           Copy OTP to clipboard
  custom <pass-cmd> <pin-cmd>
                           Specify a custom dialog to get master OTP and PIN
  edit <pass-name>         Edit OTP key using nano
  find <pass-name>         Search OTPs and display as a tree
  import                   Import OTPs from password store
  ls, list                 List all stored OTPs in a tree format
  out, output, stdout [-a] <pass-name>
                           Print OTP to stdout
  recuva <pass-name>       Use nano to manage recovery keys
  rm, remove [-f] <pass-name>
                           Remove a OTP entry
  version                  Display the current version number

Examples:
  $0 new -c MyService ABCDEFGHIJKLMNOP
  $0 clip MyService
  $0 list
EOF
}

function otp_version() {
  echo "v.2.1.0"
}

function otp_import() {
  PASSWORD_STORE_DIR=${PASSWORD_STORE_DIR:-$HOME/.password-store/}
  if [ ! -d "$PASS_STORE" ]; then
    echo "PASS_STORE not found!"
    exit 1
  fi
  if [ -z "$PASS_PUBKEY" ]; then
    text "$RED" "Missing public age key!"
  fi
  cd "$PASSWORD_STORE_DIR" || exit 1
  find . -type f -name "*.gpg" | while IFS= read -r password_file; do
    password_name=$(sed 's|^.\(.*\).gpg$|\1|' <<<"$password_file")
    password_dir=$(sed 's|^./\(.*\)/[^/]*\.gpg$|\1/|' <<<"$password_file")
    password=$(pass "$password_name" | tail -n 1 | awk -F'secret=' '
    { if (NF > 1) { split($2, a, "&"); print a[1] } else { exit 1 } }')

    if [ $? -ne 0 ]; then
      text "$RED" "Error: $password_name does not have a OTP secret key!" >&2
      continue
    fi

    if [ "$(awk -F '/' '{print $1}' <<<"$password_dir")" != "." ]; then
      mkdir -p "$OTP_STORE/$password_dir"
    fi

    echo "$password" | age --encrypt --recipient="$(cat "$PASS_PUBKEY")" -o "$OTP_STORE/$password_name.age"
    val=$?

    if [ $val -ne 0 ]; then
      text "$RED" "Error encrypting password: $password_name" >&2
      continue
    fi

    text "$GREEN" "Password $password_name encrypted successfully!"
  done
  text "$RED" "Important note: Only the first line have been copied!"
  text "$RED" "If there were multiline passwords, they are not copied."
  git -C "$PASS_STORE" add . && git -C "$PASS_STORE" commit . -m "Imported OTP secret keys from passwordstore"
  find "$OTP_STORE" -type f -exec chmod 600 {} +
}

function generate_otp() {
  local FORCE PASSWORD
  FORCE="${FORCE:-false}"
  FORCE=$(sed -n 's/^FORCE=//p' "$PASSRC")
  PASSWORD="$OTP_STORE/$name.age"
  CLIP_POST_ACTION=${CLIP_POST_ACTION:-false}
  if [ ! -d "$OTP_STORE" ]; then
    mkdir "$OTP_STORE"
  fi
  if [ -z "$otp_key" ]; then
    echo "Error: Missing OTP key"
    exit 1
  fi
  if [ -f "$PASSWORD" ]; then
    text "$BLUE" "This password already exists!"
    if [ "$FORCE" = "true" ]; then
      srm "$PASSWORD"
      text "$RED" "Overwritting $name"
    else
      exit 1
    fi
  fi

  function otp_error() {
    error=$?
    [[ "$error" -ne 0 ]] && {
      echo "An error occurred!" >&2
      if [ -f "$PASSWORD" ]; then
        srm "$PASSWORD"
      fi
      exit 1
    }
  }

  get_age_key public # get pubkey

  cd "$PASSWORD_STORE" || exit 1
  mkdir -p "$(dirname "$name")"

  echo "$otp_key" | age --encrypt --recipient="$key" --output="$PASSWORD"
  otp_error
  git -C "$PASS_STORE" add . && git -C "$PASS_STORE" commit . -m "Add generated OTP for $name"
  chmod 600 "$PASSWORD"
  if [ "$CLIP_POST_ACTION" = "true" ]; then
    copy_password
  fi
}

function edit_otp() {
  local tmp_file PASSWORD STORE PASS_OPERATION
  PASS_OPERATION="$2"
  STORE=${1:-"$PASSWORD_STORE"}
  PASSWORD="$STORE/$name.age"
  tmp_file="$STORE/$name.tmp"
  decrypted_file=$(mktemp --tmpdir="/run/user/$(id -u)/" tmp_pass.XXXXXX)

  function edit_error() {
    val=$?
    if [ "$val" -ne 0 ]; then
      mv "$tmp_file" "$PASSWORD"
      srm "$decrypted_file"
      echo "An error occurred!" >&2
      return 1
    fi
  }

  get_age_key private

  if [ -f "$tmp_file" ]; then
    mv "$tmp_file" "$PASSWORD"
  fi

  mv "$OTP_STORE/$name.age" "$tmp_file" # safeguard original password

  key=$(get_age_key_amp_get pass)
  age --decrypt --identity <(echo "$key") "$tmp_file" >"$decrypted_file"
  edit_error

  nano "$decrypted_file"
  edit_error

  get_age_key public

  age --encrypt --recipient="$key" -o "$PASSWORD" "$decrypted_file"
  edit_error

  srm "$tmp_file" "$decrypted_file"

  git -C "$PASS_STORE" add . &&
    git -C "$PASS_STORE" commit -m "Edit $PASS_OPERATION $name"
  chmod 600 "$PASSWORD"

  if [ "$CLIP_POST_ACTION" = "true" ]; then
    copy_otp
  fi
}

function recuva() {
  local tmp_file PASSWORD STORE PASS_OPERATION
  STORE=${1:-"$RECUVA_STORE"}
  PASSWORD="$STORE/$name.age"
  tmp_file="$STORE/$name.tmp"
  decrypted_file=$(mktemp --tmpdir="/run/user/$(id -u)/" tmp_pass.XXXXXX)

  function edit_error() {
    val=$?
    if [ "$val" -ne 0 ]; then
      mv "$tmp_file" "$PASSWORD"
      srm "$decrypted_file"
      echo "An error occurred!" >&2
      return 1
    fi
  }

  if [ ! -f "$PASSWORD" ]; then
    [[ ! -d "$STORE" ]] && mkdir "$STORE"
    cd "$STORE" || exit 1
    mkdir -p "$(dirname "$name")"
  else
    get_age_key private

    if [ -f "$tmp_file" ]; then
      mv "$tmp_file" "$PASSWORD"
    fi

    mv "$STORE/$name.age" "$tmp_file" # safeguard original password

    key=$(get_age_key_amp_get pass)
    age --decrypt --identity <(echo "$key") "$tmp_file" >"$decrypted_file"
    edit_error
  fi

  nano "$decrypted_file"
  edit_error

  get_age_key public

  age --encrypt --recipient="$key" -o "$PASSWORD" "$decrypted_file"
  edit_error

  srm "$tmp_file" "$decrypted_file"

  git -C "$PASS_STORE" add . &&
    git -C "$PASS_STORE" commit -m "Edit recovery key: $name"
  chmod 600 "$PASSWORD"

  if [ "$CLIP_POST_ACTION" = "true" ]; then
    copy_password
  fi
}

function copy_otp() {
  copy_password
  clip_otp
}

function clip_otp() {
  if [ "$ENTROPY_AMPLIFICATION" = "true" ]; then
    key=$(get_age_key_amp_get pass)
    age --decrypt --identity <(echo "$key") "$STORE" | oathtool --totp --base32 - | $clip_command
  else
    key=$(get_age_key_amp_get pass)
    age --decrypt --identity <(echo "$key") "$STORE" | oathtool --totp --base32 - | $clip_command
  fi

  echo "Clearing the password from clipboard in $CLIPBOARD_CLEAR_TIME seconds..."
  if [ "$NOTIFY" = "true" ]; then
    notify-send -u normal "Pass: Copy" "Clearing the password in $CLIPBOARD_CLEAR_TIME seconds..."
  fi
  sleep "$CLIPBOARD_CLEAR_TIME"s
  clear_clipboard
}

function get_otp_args() {
  while getopts ":hnafvezc:d:p:i:s:" opt; do
    case "$opt" in
    a)
      ENTROPY_AMPLIFICATION=true
      ;;
    n)
      NOTIFY=true
      ;;
    i)
      ENTROPY_ITERATION="$OPTARG"
      ;;
    e)
      POST_CLIPBOARD_CLEAR=$(sed -n 's/^POST_CLIPBOARD_CLEAR=//p' "$PASSRC")
      ;;
    s)
      ENTROPY_SALT="$OPTARG"
      ;;
    h)
      usage_otp
      exit 0
      ;;
    f) FORCE=true ;;
    d)
      DIALOG="$OPTARG"
      ;;
    p) PWGEN_OPT="$OPTARG" ;;
    c)
      CLIP_POST_ACTION=true
      ;;
    v)
      otp_version
      exit 0
      ;;
    z)
      KEEP_PASS=false
      ;;
    ?)
      echo "Error: Invalid option '-$OPTARG'" >&2
      usage_otp
      exit 0
      ;;
    esac
  done

  shift $((OPTIND - 1))

  case "$1" in
  -h | --help | usage)
    usage_otp
    exit 0
    ;;
  cp | copy | clip)
    shift
    name=$1
    if [[ -z "$name" ]]; then
      fzf_passwords "$OTP_STORE"
    fi
    copy_otp
    exit 0
    ;;
  custom-cmd)
    DIALOG="custom"
    shift
    CUSTOM_CMD_PASSWORD="$1"
    shift
    CUSTOM_CMD_PIN="$1"
    shift
    ;;
  add | new | generate)
    shift
    name="$1"
    if [[ -z "$name" ]]; then
      echo "Missing name"
    fi
    otp_key="$2"
    generate_otp
    exit 0
    ;;
  edit)
    shift
    name=$1
    if [[ -z "$name" ]]; then
      fzf_passwords "$OTP_STORE"
    fi
    edit_otp "$OTP_STORE" OTP
    exit 0
    ;;
  output | out | stdout)
    shift
    name=$1
    if [[ -z "$name" ]]; then
      fzf_passwords "$OTP_STORE"
    fi
    output_password "$OTP_STORE"
    exit 0
    ;;
  ls | list)
    list_passwords "$OTP_STORE"
    exit 0
    ;;
  rm | remove)
    shift
    name=$1
    if [[ -z "$name" ]]; then
      fzf_passwords "$OTP_STORE"
    fi
    remove_password "$OTP_STORE"
    exit 0
    ;;
  find)
    shift
    name=$1
    find_passwords "$OTP_STORE"
    exit 0
    ;;
  recuva)
    shift
    name=$1
    if [[ -z "$name" ]]; then
      fzf_passwords "$RECUVA_STORE"
    fi
    recuva "$RECUVA_STORE"
    exit 0
    ;;
  version)
    version
    exit 0
    ;;
  import)
    pass_import
    exit 0
    ;;
  esac
}

if [[ "$(basename "$0")" =~ pass-otp$ ]]; then
  get_otp_args "$@"
fi
